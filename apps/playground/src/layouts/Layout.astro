---
// Component
import CookieController from "../components/CookieController.astro";

interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Astro description" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body>
        <header
            data-store="nav"
            data-state--open="false"
            class="h-10 bg-black text-white"
            data-handler--event.document.scroll="nav:documentScroll"
        >
            <div class="flex justify-between items-center">
                <div class="flex items-center">
                    <h1>Elements</h1>
                    <div data-ref="nav:testEleRefresh" class="ml-2.5">
                        <button data-handler--event.click="nav:oldClick">
                            before
                        </button>
                    </div>
                    <button
                        data-handler--event.click="nav:replaceChild"
                        class="ml-2.5"
                    >
                        Refresh Elements
                    </button>
                </div>
                <button
                    data-handler--event.click="nav:toggle"
                    data-bind--aria-expanded="nav:open"
                    data-bind--aria-label="nav:ariaLabel"
                    aria-controls="main-nav"
                >
                    <span data-handler--dom.text="nav:buttonLabel">
                        Open Navigation
                    </span>
                </button>
            </div>
            <nav
                id="main-nav"
                data-bind--aria-hidden="nav:@closed"
                class="[&[aria-hidden='false']]:translate-x-0 fixed inset-0 top-10 bg-gray-800 z-50 transition-transform duration-200 translate-x-full p-2.5"
                aria-label="Main navigation"
                aria-hidden="true"
            >
                <a href="/">Home</a>
                <a href="/about">About</a>
            </nav>
        </header>
        <main>
            <slot />
        </main>
        <CookieController />

        <script>
            import { events, dom } from "@lucidclient/elements/handlers";
            import Elements, {
                storeModule,
                registerHandler,
                createSignal,
            } from "@lucidclient/elements";
            import { speculateLinks, Speculator } from "@lucidclient/speculate";

            registerHandler(events);
            registerHandler(dom);

            storeModule<
                {
                    boolean: boolean;
                    number: number;
                    string: string;
                    // object: Record<string, string>;
                    // array: Array<string>;
                    customState: string;
                },
                {
                    init: () => void;
                    handleClick: () => void;
                }
            >("example", (store) => ({
                state: {
                    customState: createSignal("hello world"),
                },
                actions: {
                    init() {
                        store.actions.handleClick(); // or this.handleClick()
                    },
                    handleClick: () => {
                        const [_, setBoolean] = store.state.boolean;
                        // const [getNumber] = store.state.number;
                        // const [getString] = store.state.string;
                        // const [getObject] = store.state.object;
                        // const [getArray] = store.state.array;
                        // const [getCustomState] = store.state.customState;

                        // setInterval(() => {
                        // 	console.log(getDisabled());
                        // }, 1000);

                        // console.log(getBoolean());
                        // console.log(getNumber());
                        // console.log(getString());
                        // console.log(getObject());
                        // console.log(getArray());
                        // console.log(getCustomState());

                        // console.log(store.refs.get('button'))
                        setBoolean((prev) => !prev);
                    },
                },
            }));

            type NavStoreState = {
                open: boolean;
                ariaLabel: string;
            };

            type NavStoreActions = {
                toggle: (e: Event) => void;
                closed: () => boolean;
                buttonLabel: () => string;
                documentScroll: (e: Event) => void;
            };

            storeModule<NavStoreState, NavStoreActions>("nav", (store) => ({
                state: {
                    ariaLabel: createSignal("Open Navigation"),
                },
                actions: {
                    toggle: () => {
                        const [getOpen, setOpen] = store.state.open;
                        const [_, setAriaLabel] = store.state.ariaLabel;

                        if (getOpen()) {
                            setAriaLabel("Open Navigation");
                        } else {
                            setAriaLabel("Close Navigation");
                        }

                        setOpen((prev) => !prev);
                    },
                    closed: () => {
                        const [getOpen] = store.state.open;
                        return !getOpen();
                    },
                    buttonLabel: () => {
                        const [getOpen] = store.state.open;
                        return getOpen()
                            ? "Close Navigation"
                            : "Open Navigation";
                    },

                    replaceChild: () => {
                        const target = store.refs.get("testEleRefresh");
                        if (target instanceof HTMLElement) {
                            target.innerHTML =
                                "<button data-handler--event.click='nav:newClick'>after</button>";
                        }

                        console.log("refreshElements");
                        Elements.refresh();
                    },
                    newClick: () => {
                        console.log("newClick");
                    },
                    oldClick: () => {
                        console.log("oldClick");
                    },
                    documentScroll: (e) => {
                        console.log("document scrolled", e);
                    },
                },
            }));

            Elements.start({
                debug: true,
            });

            speculateLinks();
            const speculator = new Speculator({
                elements: document.querySelectorAll("[data-page]"),
                optimistic: {
                    elements: document.querySelectorAll("[data-page='2']"),
                    condition: () => true,
                },
                fetch: async (element) => {
                    const page = element.getAttribute("data-page");

                    await new Promise((resolve) => setTimeout(resolve, 1000));
                    console.log(page);

                    if (page === "1") {
                        return {
                            data: undefined,
                            error: {
                                message: "WE DONT ALLOW PAGE 1!!" as const,
                                details: {
                                    helloWOrld: true,
                                },
                            },
                        };
                    }

                    return {
                        data: {
                            page: Number(page),
                        },
                        error: undefined,
                    };
                },
                getCacheKey: (element) => {
                    return element.getAttribute("data-page");
                },
                onClick: async (data, element) => {
                    if (data.error) {
                        console.log("error", data.error);
                        return;
                    }

                    console.log("clicked", data.data, element);
                },
                cache: {
                    maxSize: 2,
                },
            });

            const page3 = document.querySelector("[data-page='3']");
            if (page3) speculator.prefetch(page3);
        </script>
    </body>
</html>
